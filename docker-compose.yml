version: '3.8'

services:
  # 数据库服务
  database:
    image: postgres:15-alpine
    container_name: exam-system-db
    environment:
      POSTGRES_DB: exam_system
      POSTGRES_USER: exam_user
      POSTGRES_PASSWORD: exam_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - exam-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U exam_user -d exam_system"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: exam-system-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - exam-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: exam-system-backend
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=your-secret-key-here
      - JWT_SECRET_KEY=your-jwt-secret-key-here
      - DATABASE_URL=postgresql://exam_user:exam_password@database:5432/exam_system
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5001:5001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/certificates:/app/certificates
    networks:
      - exam-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/auth/profile"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: exam-system-frontend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - exam-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx负载均衡器（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: exam-system-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - exam-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  exam-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

